name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build go
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      -
        name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Tests
        run: |
          go mod tidy
          go test -v ./...
      -
        name: Get tag
        id: tag
        if: success()
        run: |
          tag="${GITHUB_REF##*/}"
          echo "tag=${tag}" >>${GITHUB_OUTPUT}
          echo "version=${tag#v}" >>${GITHUB_OUTPUT}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ steps.tag.outputs.tag }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.FASTHTTPD_TOKEN }}

  docker:
    name: Build docker
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: fasthttpd/fasthttpd
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        if: success()
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deb:
    name: Build deb
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true
      -
        name: Get release
        id: release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build deb
        run: |
          sudo ./installer/deb/build.sh ${{ steps.tag.outputs.tag }}
      -
        name: Upload amd64 deb
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/installer/deb/fasthttpd_${{ steps.tag.outputs.tag }}_amd64.deb
          asset_name: fasthttpd_${{ steps.tag.outputs.tag }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

  rpm:
    name: Build rpm
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true
      -
        name: Get release
        id: release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build rpm
        run: |
          sudo ./installer/rpm/build.sh ${{ steps.tag.outputs.tag }}
      -
        name: Upload x86_64 rpm
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/installer/rpm/build/RPMS/x86_64/fasthttpd-${{ steps.tag.outputs.tag }}-1.x86_64.rpm
          asset_name: fasthttpd-${{ steps.tag.outputs.tag }}-1.x86_64.rpm
          asset_content_type: application/x-rpm
