package logger

import (
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/fasthttpd/fasthttpd/pkg/util"
	"github.com/valyala/bytebufferpool"
)

var (
	RotationDaily = 60 * 60 * 24
)

type Rotate struct {
	name     string
	dir      string
	base     string
	ext      string
	file     *os.File
	mutex    sync.Mutex
	rotation int
	current  int
}

var _ io.Writer = (*Rotate)(nil)

func NewRorateDaily(name string) *Rotate {
	return NewRorateDuration(name, RotationDaily)
}

func NewRorateDuration(name string, rotation int) *Rotate {
	if rotation <= 0 {
		panic("duration must be above zero")
	}
	ext := filepath.Ext(name)
	base := strings.TrimRight(filepath.Base(name), ext)
	return &Rotate{
		name:     name,
		dir:      filepath.Dir(name),
		base:     base,
		ext:      ext,
		rotation: rotation,
	}
}

func (r *Rotate) rotate() error {
	now := time.Now()
	t := int(now.Unix() / int64(r.rotation))
	if t == r.current {
		return nil
	}
	if err := r.open(now, t); err != nil {
		return err
	}
	r.current = t
	return nil
}

func (r *Rotate) open(now time.Time, t int) error {
	if err := os.MkdirAll(r.dir, 0755); err != nil {
		return err
	}
	info, err := os.Stat(r.name)
	if err != nil {
		if !os.IsNotExist(err) {
			return err
		}
	}
	if info != nil {
		if int(creationTime(info)/int64(r.rotation)) != t {
			backupName := r.backupName(now)
			if err := os.Rename(r.name, backupName); err != nil {
				return err
			}
			go r.compress(backupName)
		}
	}
	file, err := os.OpenFile(r.name, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)
	if err != nil {
		return err
	}
	r.file = file
	return nil
}

func (r *Rotate) backupName(now time.Time) string {
	b := bytebufferpool.Get()
	defer bytebufferpool.Put(b)

	b.B = append(b.B, r.dir...)
	b.B = append(b.B, '/')
	b.B = append(b.B, r.base...)
	b.B = append(b.B, '-')
	b.B = util.AppendZeroPaddingUint(b.B, now.Year(), 4)
	b.B = util.AppendZeroPaddingUint(b.B, int(now.Month()), 2)
	b.B = util.AppendZeroPaddingUint(b.B, int(now.Day()), 2)
	b.B = append(b.B, r.ext...)
	return string(b.B)
}

func (r *Rotate) compress(name string) {

}

func (r *Rotate) Write(p []byte) (int, error) {
	r.mutex.Lock()
	defer r.mutex.Unlock()

	if err := r.rotate(); err != nil {
		return 0, err
	}
	return r.file.Write(p)
}

var creationTime = func(info fs.FileInfo) int64 {
	if stat, ok := info.Sys().(*syscall.Stat_t); ok {
		return stat.Atimespec.Sec
	}
	return 0
}
